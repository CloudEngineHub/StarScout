import os
import sys
import time
import logging
import requests
import pymongo

from scripts import MONGO_URL, VIRUS_TOTAL_API_KEY
from scripts.analysis.data import get_fake_star_repos_all, get_repo_with_compaign


def scan_malware_virustotal(file_path: str) -> dict:
    url = "https://www.virustotal.com/api/v3/files"

    files = {
        "file": (
            file_path,
            open(file_path, "rb"),
            "application/x-gzip",
        )
    }
    headers = {
        "accept": "application/json",
        "x-apikey": VIRUS_TOTAL_API_KEY,
    }
    response = requests.post(url, files=files, headers=headers)
    analysis_id = response.json()["data"]["id"]

    time.sleep(300)  # Wait for 5 minutes for the analysis to be completed

    url = f"https://www.virustotal.com/api/v3/analyses/{analysis_id}"
    response = requests.get(url, headers=headers)
    return response.json()


def main():
    logging.basicConfig(
        format="%(asctime)s (PID %(process)d) [%(levelname)s] %(filename)s:%(lineno)d %(message)s",
        level=logging.INFO,
        handlers=[logging.StreamHandler(sys.stdout)],
    )

    with pymongo.MongoClient(MONGO_URL) as client:
        collection = client["fake_stars"]["virus_total"]
        collection.create_index("repo", unique=True)

    repos, repos_with_campaign = get_fake_star_repos_all(), get_repo_with_compaign()
    repos = repos[repos.repo_id.notna() & repos.repo_name.isin(repos_with_campaign)]

    for repo in repos.repo_name:
        with pymongo.MongoClient(MONGO_URL) as client:
            collection = client["fake_stars"]["virus_total"]
            if collection.find_one({"repo": repo}):
                logging.info(f"Repo {repo} already scanned")
                continue

        path = "../repos/" + repo.replace("/", "_") + ".tar.gz"
        if not os.path.exists(path):
            logging.info(f"Repo {repo} not found")
            continue
        if os.path.getsize(path) > 32 * 1024 * 1024:
            logging.info(f"Repo {repo} is too large")
            continue
        logging.info(f"Scanning {repo} for malware...")

        results = scan_malware_virustotal(path)

        with pymongo.MongoClient(MONGO_URL) as client:
            collection = client["fake_stars"]["virus_total"]
            collection.insert_one(
                {
                    "repo": repo,
                    "path": path,
                    **results,
                }
            )


if __name__ == "__main__":
    main()
